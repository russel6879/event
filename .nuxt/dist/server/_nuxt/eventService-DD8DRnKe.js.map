{"version":3,"file":"eventService-DD8DRnKe.js","sources":["../../../../services/eventService.js"],"sourcesContent":["// services/apiService.js\r\nimport axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api', // Replace with your API base URL\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport default {\r\n async getUserListings() {\r\n        try {\r\n            if (process.client) { // Check if running on the client-side\r\n                const token = localStorage.getItem('access_token');\r\n                if (!token) {\r\n                    throw new Error('Access token not found'); // Handle case where token is missing\r\n                }\r\n                apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set Authorization header for authenticated requests\r\n            }\r\n\r\n            const response = await apiClient.get('/user/listings');\r\n            return response.data.listings;\r\n        } catch (error) {\r\n            console.error('Error fetching user listings:', error);\r\n            throw error; // Ensure error is re-thrown or handled appropriately\r\n        }\r\n    },\r\n  async getEvents() {\r\n    try {\r\n      const response = await apiClient.get('/events');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching events:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getEvent(id) {\r\n    try {\r\n      const response = await apiClient.get(`/events/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching event with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getEventDetails(slug) {\r\n    try {\r\n      const response = await apiClient.get(`/event-details/${slug}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching event with ID ${slug}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getCountries() {\r\n    try {\r\n      const response = await apiClient.get('/countries');  \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getHomePageCategories() {\r\n    try {\r\n      const response = await apiClient.get('/get-index-categories');  \r\n   \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getCategories() {\r\n    try {\r\n      const response = await apiClient.get('/get-categories');  \r\n   \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch venues by country ID\r\n  async getVenuesByCountry(countryId) {\r\n    try {\r\n      const response = await apiClient.get(`/get-venue?country_id=${countryId}`);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching venues for country ID ${countryId}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async createEvent(eventData) {\r\n    \r\n    try {\r\n      const response = await apiClient.post('/events', eventData);\r\n   \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating event:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateEvent(id, eventData) {\r\n    try {\r\n      const response = await apiClient.put(`/events/${id}`, eventData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating event with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getEventsByCategory(categoryId, page = 1) {\r\n    try {\r\n      const response = await apiClient.get(`/events/category/${categoryId}`, {\r\n        params: { page }\r\n      });\r\n    \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching events for category ID ${categoryId}:`, error);\r\n      throw error; // Re-throw the error so it can be handled where the method is called\r\n    }\r\n  },\r\n  async searchEvents(params) {\r\n  \r\n    try {\r\n      const response = await apiClient.get('event-search', {\r\n        params: {\r\n          query: params.query,\r\n          country: params.country,\r\n          category: params.category,\r\n          page: params.page, // Include the page parameter\r\n        },\r\n      });\r\n \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching events `, error);\r\n      throw error; // Re-throw the error so it can be handled where the method is called\r\n    }\r\n  },\r\n\r\n  async deleteEvent(eventId) {\r\n    try {\r\n        const token = localStorage.getItem('access_token');\r\n        if (!token) {\r\n            throw new Error('Access token not found');\r\n        }\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n        const response = await apiClient.delete(`/events/${eventId}`);\r\n        return response.data; // Assuming the API returns a confirmation or success message\r\n    } catch (error) {\r\n        console.error('Error deleting event:', error);\r\n        throw error;\r\n    }\r\n}\r\n};"],"names":[],"mappings":"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"}