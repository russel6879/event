{"version":3,"file":"authService--uU7v7w3.js","sources":["../../../../services/authService.js"],"sourcesContent":["// services/authService.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api', // Replace with your API base URL\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport default {\r\n  async registerUser(userData) {\r\n    try {\r\n      const response = await apiClient.post('/signup', userData);\r\n      return response.data; // Assuming API returns data upon successful registration\r\n    } catch (error) {\r\n      console.error('Error registering user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async login(credentials) {\r\n    const response = await apiClient.post('/login', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Add other authentication-related methods as needed\r\n  async logout() {\r\n    const token = localStorage.getItem('access_token');\r\n    if (!token) {\r\n      throw new Error('No token found');\r\n    }\r\n\r\n    const response = await apiClient.post('/logout', {}, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    // Remove the token from local storage\r\n    localStorage.removeItem('access_token');\r\n\r\n    return response.data;\r\n  },\r\n  async getUserProfile() {\r\n    try {\r\n        if (process.client) { // Check if running on the client-side\r\n            const token = localStorage.getItem('access_token');\r\n            if (!token) {\r\n                throw new Error('Access token not found'); // Handle case where token is missing\r\n            }\r\n            apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set Authorization header for authenticated requests\r\n        }\r\n\r\n        const response = await apiClient.get('/profile');\r\n        return response.data; // Adjust based on how your API returns profile data\r\n    } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n        throw error; // Ensure error is re-thrown or handled appropriately\r\n    }\r\n},\r\n\r\nasync updateUserProfile(profileData) {\r\n    try {\r\n        if (process.client) {\r\n            const token = localStorage.getItem('access_token');\r\n            if (!token) {\r\n                throw new Error('Access token not found'); // Handle case where token is missing\r\n            }\r\n            apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set Authorization header for authenticated requests\r\n        }\r\n\r\n        const response = await apiClient.post('/profile', profileData);\r\n        return response.data; // Adjust based on how your API returns profile data\r\n    } catch (error) {\r\n        console.error('Error updating user profile:', error);\r\n        throw error; // Ensure error is re-thrown or handled appropriately\r\n    }\r\n},\r\n};\r\n"],"names":[],"mappings":";AAIkB,MAAM,OAAO;AAAA,EAC7B,SAAS;AAAA;AAAA,EACT,iBAAiB;AAAA,EACjB,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AACF,CAAC;"}