{"version":3,"file":"eventService--uU7v7w3.js","sources":["../../../../services/eventService.js"],"sourcesContent":["// services/apiService.js\r\nimport axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api', // Replace with your API base URL\r\n  withCredentials: false,\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport default {\r\n async getUserListings() {\r\n        try {\r\n            if (process.client) { // Check if running on the client-side\r\n                const token = localStorage.getItem('access_token');\r\n                if (!token) {\r\n                    throw new Error('Access token not found'); // Handle case where token is missing\r\n                }\r\n                apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`; // Set Authorization header for authenticated requests\r\n            }\r\n\r\n            const response = await apiClient.get('/user/listings');\r\n            return response.data.listings;\r\n        } catch (error) {\r\n            console.error('Error fetching user listings:', error);\r\n            throw error; // Ensure error is re-thrown or handled appropriately\r\n        }\r\n    },\r\n  async getEvents() {\r\n    try {\r\n      const response = await apiClient.get('/events');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching events:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getEvent(id) {\r\n    try {\r\n      const response = await apiClient.get(`/events/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching event with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getEventDetails(slug) {\r\n    try {\r\n      const response = await apiClient.get(`/event-details/${slug}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching event with ID ${slug}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getCountries() {\r\n    try {\r\n      const response = await apiClient.get('/countries');  \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  async getCategories() {\r\n    try {\r\n      const response = await apiClient.get('/get-categories');  \r\n   \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch venues by country ID\r\n  async getVenuesByCountry(countryId) {\r\n    try {\r\n      const response = await apiClient.get(`/get-venue?country_id=${countryId}`);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching venues for country ID ${countryId}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  async createEvent(eventData) {\r\n    \r\n    try {\r\n      const response = await apiClient.post('/events', eventData);\r\n   \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating event:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateEvent(id, eventData) {\r\n    try {\r\n      const response = await apiClient.put(`/events/${id}`, eventData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating event with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteEvent(eventId) {\r\n    try {\r\n        const token = localStorage.getItem('access_token');\r\n        if (!token) {\r\n            throw new Error('Access token not found');\r\n        }\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n        const response = await apiClient.delete(`/events/${eventId}`);\r\n        return response.data; // Assuming the API returns a confirmation or success message\r\n    } catch (error) {\r\n        console.error('Error deleting event:', error);\r\n        throw error;\r\n    }\r\n}\r\n};"],"names":[],"mappings":";AAGkB,MAAM,OAAO;AAAA,EAC7B,SAAS;AAAA;AAAA,EACT,iBAAiB;AAAA,EACjB,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AACF,CAAC;"}